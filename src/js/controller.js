import * as model from './model.js';
import { MODAL_CLOSE_SEC } from './config.js';
import recipeView from './views/recipeViews.js';
import searchView from './views/searchView.js';
import resultsView from './views/resultsView.js';
import paginationView from './views/paginationView.js';
import bookmarksView from './views/bookmarksView.js';
import addRecipeView from './views/addRecipeView.js';

import 'core-js/stable';
import 'regenerator-runtime';
import { async } from 'regenerator-runtime';

// if (module.hot) {
//   module.hot.accept();
// }

// https://forkify-api.herokuapp.com/v2

///////////////////////////////////////

const controlRecipes = async function () {
  try {
    // –ø–æ–ª—É—á–∞–µ–º id –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const id = window.location.hash.slice(1);

    if (!id) return;
    recipeView.renderSpinner();

    // 1. –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    resultsView.update(model.getSearchResultsPage());

    // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏
    bookmarksView.update(model.state.bookmarks);

    // 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞
    await model.loadRecipe(id);

    // 4. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ—Ü–µ–ø—Ç–∞
    recipeView.render(model.state.recipe);
    // const recipeView = new recipeView(model.state.recipe);
  } catch (err) {
    recipeView.renderError();
    console.error(err);
  }
};
controlRecipes();

const controlSearcResults = async function () {
  try {
    resultsView.renderSpinner();

    // 1. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const query = searchView.getQuery();
    if (!query) return;

    // 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    await model.loadSearchResults(query);

    // 3. –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–ª–∏—Å—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    // resultsView.render(model.state.search.results);
    // –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    resultsView.render(model.getSearchResultsPage());

    // 4. –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–∫–∏
    paginationView.render(model.state.search);
  } catch (err) {
    console.log(err);
  }
};

const controlPagination = function (goToPage) {
  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  resultsView.render(model.getSearchResultsPage(goToPage));
  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
  paginationView.render(model.state.search);
};

const controlServings = function (newServings) {
  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ü–∏–∏ –≤ —Ä–µ—Ü–µ–ø—Ç–µ (in state)
  model.updateServings(newServings);

  // –û–±–Ω–æ–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Ä–µ—Ü–µ–ø—Ç–∞
  // recipeView.render(model.state.recipe);
  // –º–µ—Ç–æ–¥ update –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –¥–æ–º, –Ω–µ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞—è –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  recipeView.update(model.state.recipe);
};

const controlAddBookmarg = function () {
  // 1) –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É
  if (!model.state.recipe.bookmarked) model.addBookmark(model.state.recipe);
  else model.deleteBookmark(model.state.recipe.id);
  console.log(model.state.recipe);

  // 2) –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥ —Ä–µ—Ü–µ–ø—Ç–∞
  recipeView.update(model.state.recipe);

  // 3) –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏
  bookmarksView.render(model.state.bookmarks);
};

const controlBookmarks = function () {
  bookmarksView.render(model.state.bookmarks);
};

const controlAddRecipe = async function (newRecipe) {
  try {
    // –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä
    addRecipeView.renderSpinner();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
    await model.uploadRecipe(newRecipe);

    // –†–µ–Ω–¥–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞
    recipeView.render(model.state.recipe);

    // –£—Å–ø–µ—à–Ω–æ
    addRecipeView.renderMessage();

    // –†–µ–Ω–¥–µ—Ä–∏—Ç—å –≤–∏–¥ –∑–∞–∫–ª–∞–¥–æ–∫ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º
    bookmarksView.render(model.state.bookmarks);

    // –ò–∑–º–µ–Ω–∏—Ç—å –∞–π–¥–∏ –≤ URL
    window.history.pushState(null, '', `#${model.state.recipe.id}`);
    // window.history.back();

    // –ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
    setTimeout(function () {
      addRecipeView.toggleWindow();
    }, MODAL_CLOSE_SEC * 1000);
  } catch (err) {
    console.error('üéÜ', err);
    addRecipeView.renderError(err.message);
  }
};

const init = function () {
  bookmarksView.addHandlerRender(controlBookmarks);
  recipeView.addHandlerRender(controlRecipes);
  recipeView.addHandlerUpdateServings(controlServings);
  recipeView.addHandlerAddBookmark(controlAddBookmarg);
  searchView.addHandlerSearch(controlSearcResults);
  paginationView.addHandlerClick(controlPagination);
  addRecipeView.addHandlerUpload(controlAddRecipe);
};
init();
